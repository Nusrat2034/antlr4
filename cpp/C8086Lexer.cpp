
    #pragma once
    #include <iostream>
    #include <fstream>
    #include <string>

    extern std::ofstream lexLogFile;


// Generated from C8086Lexer.g4 by ANTLR 4.9.2


#include "C8086Lexer.h"


using namespace antlr4;


C8086Lexer::C8086Lexer(CharStream *input) : Lexer(input) {
  _interpreter = new atn::LexerATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

C8086Lexer::~C8086Lexer() {
  delete _interpreter;
}

std::string C8086Lexer::getGrammarFileName() const {
  return "C8086Lexer.g4";
}

const std::vector<std::string>& C8086Lexer::getRuleNames() const {
  return _ruleNames;
}

const std::vector<std::string>& C8086Lexer::getChannelNames() const {
  return _channelNames;
}

const std::vector<std::string>& C8086Lexer::getModeNames() const {
  return _modeNames;
}

const std::vector<std::string>& C8086Lexer::getTokenNames() const {
  return _tokenNames;
}

dfa::Vocabulary& C8086Lexer::getVocabulary() const {
  return _vocabulary;
}

const std::vector<uint16_t> C8086Lexer::getSerializedATN() const {
  return _serializedATN;
}

const atn::ATN& C8086Lexer::getATN() const {
  return _atn;
}


void C8086Lexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 0: LINE_COMMENTAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 1: BLOCK_COMMENTAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 2: STRINGAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 4: IFAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 5: ELSEAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 6: FORAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 7: WHILEAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 8: PRINTLNAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 9: RETURNAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 10: INTAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 11: FLOATAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 12: VOIDAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 13: LPARENAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 14: RPARENAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 15: LCURLAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 16: RCURLAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 17: LTHIRDAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 18: RTHIRDAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 19: SEMICOLONAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 20: COMMAAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 21: ADDOPAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 22: SUBOPAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 23: MULOPAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 24: INCOPAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 25: DECOPAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 26: NOTAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 27: RELOPAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 28: LOGICOPAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 29: ASSIGNOPAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 30: IDAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 31: CONST_INTAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 32: CONST_FLOATAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void C8086Lexer::LINE_COMMENTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0: 
            writeIntoLexLogFile(
              "Line# " + std::to_string(getLine())
              + ": Token <SINGLE LINE COMMENT> Lexeme "
              + getText()
            );
         break;

  default:
    break;
  }
}

void C8086Lexer::BLOCK_COMMENTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: 
          // extra braces create a new scope for your variables
          {
            std::string txt = getText();
            std::string content = txt.substr(2, txt.size() - 4);
            writeIntoLexLogFile(
              "Line# " + std::to_string(getLine())
              + ": Token <MULTI LINE COMMENT> Lexeme /*"
              + content + "*/"
            );
          }
         break;

  default:
    break;
  }
}

void C8086Lexer::STRINGAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2: 
            writeIntoLexLogFile(
              "Line# " + std::to_string(getLine())
              + ": Token <STRING> Lexeme " + getText()
            );
         break;

  default:
    break;
  }
}

void C8086Lexer::IFAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <IF> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::ELSEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 4:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <ELSE> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::FORAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 5:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <FOR> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::WHILEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 6:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <WHILE> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::PRINTLNAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 7:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <PRINTLN> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::RETURNAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 8:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <RETURN> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::INTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 9:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <INT> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::FLOATAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 10:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <FLOAT> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::VOIDAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 11:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <VOID> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::LPARENAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 12:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <LPAREN> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::RPARENAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 13:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <RPAREN> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::LCURLAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 14:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <LCURL> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::RCURLAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 15:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <RCURL> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::LTHIRDAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 16:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <LTHIRD> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::RTHIRDAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 17:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <RTHIRD> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::SEMICOLONAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 18:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <SEMICOLON> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::COMMAAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 19:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <COMMA> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::ADDOPAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 20:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <ADDOP> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::SUBOPAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 21:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <SUBOP> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::MULOPAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 22:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <MULOP> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::INCOPAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 23:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <INCOP> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::DECOPAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 24:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <DECOP> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::NOTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 25:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <NOT> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::RELOPAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 26:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <RELOP> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::LOGICOPAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 27:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <LOGICOP> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::ASSIGNOPAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 28:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <ASSIGNOP> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::IDAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 29:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <ID> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::CONST_INTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 30:  writeIntoLexLogFile("Line# " + std::to_string(getLine()) + ": Token <CONST_INT> Lexeme " + getText());  break;

  default:
    break;
  }
}

void C8086Lexer::CONST_FLOATAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 31: 
            writeIntoLexLogFile(
              "Line# " + std::to_string(getLine())
              + ": Token <CONST_FLOAT> Lexeme " + getText()
            );
         break;
    case 32: 
            writeIntoLexLogFile(
              "Line# " + std::to_string(getLine())
              + ": Token <CONST_FLOAT> Lexeme " + getText()
            );
         break;
    case 33: 
            writeIntoLexLogFile(
              "Line# " + std::to_string(getLine())
              + ": Token <CONST_FLOAT> Lexeme " + getText()
            );
         break;

  default:
    break;
  }
}



// Static vars and initialization.
std::vector<dfa::DFA> C8086Lexer::_decisionToDFA;
atn::PredictionContextCache C8086Lexer::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN C8086Lexer::_atn;
std::vector<uint16_t> C8086Lexer::_serializedATN;

std::vector<std::string> C8086Lexer::_ruleNames = {
  "LINE_COMMENT", "BLOCK_COMMENT", "STRING", "WS", "IF", "ELSE", "FOR", 
  "WHILE", "PRINTLN", "RETURN", "INT", "FLOAT", "VOID", "LPAREN", "RPAREN", 
  "LCURL", "RCURL", "LTHIRD", "RTHIRD", "SEMICOLON", "COMMA", "ADDOP", "SUBOP", 
  "MULOP", "INCOP", "DECOP", "NOT", "RELOP", "LOGICOP", "ASSIGNOP", "ID", 
  "CONST_INT", "CONST_FLOAT"
};

std::vector<std::string> C8086Lexer::_channelNames = {
  "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
};

std::vector<std::string> C8086Lexer::_modeNames = {
  "DEFAULT_MODE"
};

std::vector<std::string> C8086Lexer::_literalNames = {
  "", "", "", "", "", "'if'", "'else'", "'for'", "'while'", "'println'", 
  "'return'", "'int'", "'float'", "'void'", "'('", "')'", "'{'", "'}'", 
  "'['", "']'", "';'", "','", "", "", "", "'++'", "'--'", "'!'", "", "", 
  "'='"
};

std::vector<std::string> C8086Lexer::_symbolicNames = {
  "", "LINE_COMMENT", "BLOCK_COMMENT", "STRING", "WS", "IF", "ELSE", "FOR", 
  "WHILE", "PRINTLN", "RETURN", "INT", "FLOAT", "VOID", "LPAREN", "RPAREN", 
  "LCURL", "RCURL", "LTHIRD", "RTHIRD", "SEMICOLON", "COMMA", "ADDOP", "SUBOP", 
  "MULOP", "INCOP", "DECOP", "NOT", "RELOP", "LOGICOP", "ASSIGNOP", "ID", 
  "CONST_INT", "CONST_FLOAT"
};

dfa::Vocabulary C8086Lexer::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> C8086Lexer::_tokenNames;

C8086Lexer::Initializer::Initializer() {
  // This code could be in a static initializer lambda, but VS doesn't allow access to private class members from there.
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static const uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x2, 0x23, 0x13a, 0x8, 0x1, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 
       0x4, 0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 
       0x7, 0x9, 0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 
       0x9, 0xa, 0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 
       0xd, 0x4, 0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 
       0x4, 0x11, 0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 
       0x4, 0x14, 0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 
       0x4, 0x17, 0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 
       0x4, 0x1a, 0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 
       0x4, 0x1d, 0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 
       0x4, 0x20, 0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 
       0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x7, 0x2, 0x4a, 0xa, 0x2, 
       0xc, 0x2, 0xe, 0x2, 0x4d, 0xb, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 
       0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x7, 
       0x3, 0x58, 0xa, 0x3, 0xc, 0x3, 0xe, 0x3, 0x5b, 0xb, 0x3, 0x3, 0x3, 
       0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 
       0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x7, 0x4, 0x68, 0xa, 0x4, 0xc, 
       0x4, 0xe, 0x4, 0x6b, 0xb, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 
       0x4, 0x3, 0x4, 0x3, 0x5, 0x6, 0x5, 0x73, 0xa, 0x5, 0xd, 0x5, 0xe, 
       0x5, 0x74, 0x3, 0x5, 0x3, 0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 
       0x3, 0x7, 0x3, 0x7, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 
       0x8, 0x3, 0x8, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 
       0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 
       0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 
       0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 
       0x3, 0xc, 0x3, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 
       0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xe, 0x3, 0xe, 0x3, 0xe, 
       0x3, 0xe, 0x3, 0xe, 0x3, 0xe, 0x3, 0xe, 0x3, 0xf, 0x3, 0xf, 0x3, 
       0xf, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x11, 0x3, 0x11, 0x3, 
       0x11, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x13, 0x3, 0x13, 0x3, 
       0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x15, 0x3, 0x15, 0x3, 
       0x15, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x17, 0x3, 0x17, 0x3, 
       0x17, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 
       0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1c, 0x3, 
       0x1c, 0x3, 0x1c, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 
       0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 
       0x1d, 0x5, 0x1d, 0xf4, 0xa, 0x1d, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 
       0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0xfc, 0xa, 0x1e, 0x3, 
       0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x20, 0x3, 0x20, 0x7, 0x20, 0x103, 
       0xa, 0x20, 0xc, 0x20, 0xe, 0x20, 0x106, 0xb, 0x20, 0x3, 0x20, 0x3, 
       0x20, 0x3, 0x21, 0x6, 0x21, 0x10b, 0xa, 0x21, 0xd, 0x21, 0xe, 0x21, 
       0x10c, 0x3, 0x21, 0x3, 0x21, 0x3, 0x22, 0x6, 0x22, 0x112, 0xa, 0x22, 
       0xd, 0x22, 0xe, 0x22, 0x113, 0x3, 0x22, 0x3, 0x22, 0x7, 0x22, 0x118, 
       0xa, 0x22, 0xc, 0x22, 0xe, 0x22, 0x11b, 0xb, 0x22, 0x5, 0x22, 0x11d, 
       0xa, 0x22, 0x3, 0x22, 0x3, 0x22, 0x5, 0x22, 0x121, 0xa, 0x22, 0x3, 
       0x22, 0x6, 0x22, 0x124, 0xa, 0x22, 0xd, 0x22, 0xe, 0x22, 0x125, 0x5, 
       0x22, 0x128, 0xa, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x6, 0x22, 
       0x12d, 0xa, 0x22, 0xd, 0x22, 0xe, 0x22, 0x12e, 0x3, 0x22, 0x3, 0x22, 
       0x6, 0x22, 0x133, 0xa, 0x22, 0xd, 0x22, 0xe, 0x22, 0x134, 0x3, 0x22, 
       0x3, 0x22, 0x5, 0x22, 0x139, 0xa, 0x22, 0x3, 0x59, 0x2, 0x23, 0x3, 
       0x3, 0x5, 0x4, 0x7, 0x5, 0x9, 0x6, 0xb, 0x7, 0xd, 0x8, 0xf, 0x9, 
       0x11, 0xa, 0x13, 0xb, 0x15, 0xc, 0x17, 0xd, 0x19, 0xe, 0x1b, 0xf, 
       0x1d, 0x10, 0x1f, 0x11, 0x21, 0x12, 0x23, 0x13, 0x25, 0x14, 0x27, 
       0x15, 0x29, 0x16, 0x2b, 0x17, 0x2d, 0x18, 0x2f, 0x19, 0x31, 0x1a, 
       0x33, 0x1b, 0x35, 0x1c, 0x37, 0x1d, 0x39, 0x1e, 0x3b, 0x1f, 0x3d, 
       0x20, 0x3f, 0x21, 0x41, 0x22, 0x43, 0x23, 0x3, 0x2, 0xc, 0x4, 0x2, 
       0xc, 0xc, 0xf, 0xf, 0x6, 0x2, 0xc, 0xc, 0xf, 0xf, 0x24, 0x24, 0x5e, 
       0x5e, 0x5, 0x2, 0xb, 0xc, 0xe, 0xf, 0x22, 0x22, 0x4, 0x2, 0x2d, 0x2d, 
       0x2f, 0x2f, 0x5, 0x2, 0x27, 0x27, 0x2c, 0x2c, 0x31, 0x31, 0x4, 0x2, 
       0x3e, 0x3e, 0x40, 0x40, 0x5, 0x2, 0x43, 0x5c, 0x61, 0x61, 0x63, 0x7c, 
       0x6, 0x2, 0x32, 0x3b, 0x43, 0x5c, 0x61, 0x61, 0x63, 0x7c, 0x3, 0x2, 
       0x32, 0x3b, 0x4, 0x2, 0x47, 0x47, 0x67, 0x67, 0x2, 0x150, 0x2, 0x3, 
       0x3, 0x2, 0x2, 0x2, 0x2, 0x5, 0x3, 0x2, 0x2, 0x2, 0x2, 0x7, 0x3, 
       0x2, 0x2, 0x2, 0x2, 0x9, 0x3, 0x2, 0x2, 0x2, 0x2, 0xb, 0x3, 0x2, 
       0x2, 0x2, 0x2, 0xd, 0x3, 0x2, 0x2, 0x2, 0x2, 0xf, 0x3, 0x2, 0x2, 
       0x2, 0x2, 0x11, 0x3, 0x2, 0x2, 0x2, 0x2, 0x13, 0x3, 0x2, 0x2, 0x2, 
       0x2, 0x15, 0x3, 0x2, 0x2, 0x2, 0x2, 0x17, 0x3, 0x2, 0x2, 0x2, 0x2, 
       0x19, 0x3, 0x2, 0x2, 0x2, 0x2, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x2, 0x1d, 
       0x3, 0x2, 0x2, 0x2, 0x2, 0x1f, 0x3, 0x2, 0x2, 0x2, 0x2, 0x21, 0x3, 
       0x2, 0x2, 0x2, 0x2, 0x23, 0x3, 0x2, 0x2, 0x2, 0x2, 0x25, 0x3, 0x2, 
       0x2, 0x2, 0x2, 0x27, 0x3, 0x2, 0x2, 0x2, 0x2, 0x29, 0x3, 0x2, 0x2, 
       0x2, 0x2, 0x2b, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2d, 0x3, 0x2, 0x2, 0x2, 
       0x2, 0x2f, 0x3, 0x2, 0x2, 0x2, 0x2, 0x31, 0x3, 0x2, 0x2, 0x2, 0x2, 
       0x33, 0x3, 0x2, 0x2, 0x2, 0x2, 0x35, 0x3, 0x2, 0x2, 0x2, 0x2, 0x37, 
       0x3, 0x2, 0x2, 0x2, 0x2, 0x39, 0x3, 0x2, 0x2, 0x2, 0x2, 0x3b, 0x3, 
       0x2, 0x2, 0x2, 0x2, 0x3d, 0x3, 0x2, 0x2, 0x2, 0x2, 0x3f, 0x3, 0x2, 
       0x2, 0x2, 0x2, 0x41, 0x3, 0x2, 0x2, 0x2, 0x2, 0x43, 0x3, 0x2, 0x2, 
       0x2, 0x3, 0x45, 0x3, 0x2, 0x2, 0x2, 0x5, 0x52, 0x3, 0x2, 0x2, 0x2, 
       0x7, 0x63, 0x3, 0x2, 0x2, 0x2, 0x9, 0x72, 0x3, 0x2, 0x2, 0x2, 0xb, 
       0x78, 0x3, 0x2, 0x2, 0x2, 0xd, 0x7d, 0x3, 0x2, 0x2, 0x2, 0xf, 0x84, 
       0x3, 0x2, 0x2, 0x2, 0x11, 0x8a, 0x3, 0x2, 0x2, 0x2, 0x13, 0x92, 0x3, 
       0x2, 0x2, 0x2, 0x15, 0x9c, 0x3, 0x2, 0x2, 0x2, 0x17, 0xa5, 0x3, 0x2, 
       0x2, 0x2, 0x19, 0xab, 0x3, 0x2, 0x2, 0x2, 0x1b, 0xb3, 0x3, 0x2, 0x2, 
       0x2, 0x1d, 0xba, 0x3, 0x2, 0x2, 0x2, 0x1f, 0xbd, 0x3, 0x2, 0x2, 0x2, 
       0x21, 0xc0, 0x3, 0x2, 0x2, 0x2, 0x23, 0xc3, 0x3, 0x2, 0x2, 0x2, 0x25, 
       0xc6, 0x3, 0x2, 0x2, 0x2, 0x27, 0xc9, 0x3, 0x2, 0x2, 0x2, 0x29, 0xcc, 
       0x3, 0x2, 0x2, 0x2, 0x2b, 0xcf, 0x3, 0x2, 0x2, 0x2, 0x2d, 0xd2, 0x3, 
       0x2, 0x2, 0x2, 0x2f, 0xd5, 0x3, 0x2, 0x2, 0x2, 0x31, 0xd8, 0x3, 0x2, 
       0x2, 0x2, 0x33, 0xdb, 0x3, 0x2, 0x2, 0x2, 0x35, 0xe0, 0x3, 0x2, 0x2, 
       0x2, 0x37, 0xe5, 0x3, 0x2, 0x2, 0x2, 0x39, 0xf3, 0x3, 0x2, 0x2, 0x2, 
       0x3b, 0xfb, 0x3, 0x2, 0x2, 0x2, 0x3d, 0xfd, 0x3, 0x2, 0x2, 0x2, 0x3f, 
       0x100, 0x3, 0x2, 0x2, 0x2, 0x41, 0x10a, 0x3, 0x2, 0x2, 0x2, 0x43, 
       0x138, 0x3, 0x2, 0x2, 0x2, 0x45, 0x46, 0x7, 0x31, 0x2, 0x2, 0x46, 
       0x47, 0x7, 0x31, 0x2, 0x2, 0x47, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x48, 
       0x4a, 0xa, 0x2, 0x2, 0x2, 0x49, 0x48, 0x3, 0x2, 0x2, 0x2, 0x4a, 0x4d, 
       0x3, 0x2, 0x2, 0x2, 0x4b, 0x49, 0x3, 0x2, 0x2, 0x2, 0x4b, 0x4c, 0x3, 
       0x2, 0x2, 0x2, 0x4c, 0x4e, 0x3, 0x2, 0x2, 0x2, 0x4d, 0x4b, 0x3, 0x2, 
       0x2, 0x2, 0x4e, 0x4f, 0x8, 0x2, 0x2, 0x2, 0x4f, 0x50, 0x3, 0x2, 0x2, 
       0x2, 0x50, 0x51, 0x8, 0x2, 0x3, 0x2, 0x51, 0x4, 0x3, 0x2, 0x2, 0x2, 
       0x52, 0x53, 0x7, 0x31, 0x2, 0x2, 0x53, 0x54, 0x7, 0x2c, 0x2, 0x2, 
       0x54, 0x59, 0x3, 0x2, 0x2, 0x2, 0x55, 0x58, 0xb, 0x2, 0x2, 0x2, 0x56, 
       0x58, 0x9, 0x2, 0x2, 0x2, 0x57, 0x55, 0x3, 0x2, 0x2, 0x2, 0x57, 0x56, 
       0x3, 0x2, 0x2, 0x2, 0x58, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x59, 0x5a, 0x3, 
       0x2, 0x2, 0x2, 0x59, 0x57, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x5c, 0x3, 0x2, 
       0x2, 0x2, 0x5b, 0x59, 0x3, 0x2, 0x2, 0x2, 0x5c, 0x5d, 0x7, 0x2c, 
       0x2, 0x2, 0x5d, 0x5e, 0x7, 0x31, 0x2, 0x2, 0x5e, 0x5f, 0x3, 0x2, 
       0x2, 0x2, 0x5f, 0x60, 0x8, 0x3, 0x4, 0x2, 0x60, 0x61, 0x3, 0x2, 0x2, 
       0x2, 0x61, 0x62, 0x8, 0x3, 0x3, 0x2, 0x62, 0x6, 0x3, 0x2, 0x2, 0x2, 
       0x63, 0x69, 0x7, 0x24, 0x2, 0x2, 0x64, 0x65, 0x7, 0x5e, 0x2, 0x2, 
       0x65, 0x68, 0xb, 0x2, 0x2, 0x2, 0x66, 0x68, 0xa, 0x3, 0x2, 0x2, 0x67, 
       0x64, 0x3, 0x2, 0x2, 0x2, 0x67, 0x66, 0x3, 0x2, 0x2, 0x2, 0x68, 0x6b, 
       0x3, 0x2, 0x2, 0x2, 0x69, 0x67, 0x3, 0x2, 0x2, 0x2, 0x69, 0x6a, 0x3, 
       0x2, 0x2, 0x2, 0x6a, 0x6c, 0x3, 0x2, 0x2, 0x2, 0x6b, 0x69, 0x3, 0x2, 
       0x2, 0x2, 0x6c, 0x6d, 0x7, 0x24, 0x2, 0x2, 0x6d, 0x6e, 0x8, 0x4, 
       0x5, 0x2, 0x6e, 0x6f, 0x3, 0x2, 0x2, 0x2, 0x6f, 0x70, 0x8, 0x4, 0x3, 
       0x2, 0x70, 0x8, 0x3, 0x2, 0x2, 0x2, 0x71, 0x73, 0x9, 0x4, 0x2, 0x2, 
       0x72, 0x71, 0x3, 0x2, 0x2, 0x2, 0x73, 0x74, 0x3, 0x2, 0x2, 0x2, 0x74, 
       0x72, 0x3, 0x2, 0x2, 0x2, 0x74, 0x75, 0x3, 0x2, 0x2, 0x2, 0x75, 0x76, 
       0x3, 0x2, 0x2, 0x2, 0x76, 0x77, 0x8, 0x5, 0x3, 0x2, 0x77, 0xa, 0x3, 
       0x2, 0x2, 0x2, 0x78, 0x79, 0x7, 0x6b, 0x2, 0x2, 0x79, 0x7a, 0x7, 
       0x68, 0x2, 0x2, 0x7a, 0x7b, 0x3, 0x2, 0x2, 0x2, 0x7b, 0x7c, 0x8, 
       0x6, 0x6, 0x2, 0x7c, 0xc, 0x3, 0x2, 0x2, 0x2, 0x7d, 0x7e, 0x7, 0x67, 
       0x2, 0x2, 0x7e, 0x7f, 0x7, 0x6e, 0x2, 0x2, 0x7f, 0x80, 0x7, 0x75, 
       0x2, 0x2, 0x80, 0x81, 0x7, 0x67, 0x2, 0x2, 0x81, 0x82, 0x3, 0x2, 
       0x2, 0x2, 0x82, 0x83, 0x8, 0x7, 0x7, 0x2, 0x83, 0xe, 0x3, 0x2, 0x2, 
       0x2, 0x84, 0x85, 0x7, 0x68, 0x2, 0x2, 0x85, 0x86, 0x7, 0x71, 0x2, 
       0x2, 0x86, 0x87, 0x7, 0x74, 0x2, 0x2, 0x87, 0x88, 0x3, 0x2, 0x2, 
       0x2, 0x88, 0x89, 0x8, 0x8, 0x8, 0x2, 0x89, 0x10, 0x3, 0x2, 0x2, 0x2, 
       0x8a, 0x8b, 0x7, 0x79, 0x2, 0x2, 0x8b, 0x8c, 0x7, 0x6a, 0x2, 0x2, 
       0x8c, 0x8d, 0x7, 0x6b, 0x2, 0x2, 0x8d, 0x8e, 0x7, 0x6e, 0x2, 0x2, 
       0x8e, 0x8f, 0x7, 0x67, 0x2, 0x2, 0x8f, 0x90, 0x3, 0x2, 0x2, 0x2, 
       0x90, 0x91, 0x8, 0x9, 0x9, 0x2, 0x91, 0x12, 0x3, 0x2, 0x2, 0x2, 0x92, 
       0x93, 0x7, 0x72, 0x2, 0x2, 0x93, 0x94, 0x7, 0x74, 0x2, 0x2, 0x94, 
       0x95, 0x7, 0x6b, 0x2, 0x2, 0x95, 0x96, 0x7, 0x70, 0x2, 0x2, 0x96, 
       0x97, 0x7, 0x76, 0x2, 0x2, 0x97, 0x98, 0x7, 0x6e, 0x2, 0x2, 0x98, 
       0x99, 0x7, 0x70, 0x2, 0x2, 0x99, 0x9a, 0x3, 0x2, 0x2, 0x2, 0x9a, 
       0x9b, 0x8, 0xa, 0xa, 0x2, 0x9b, 0x14, 0x3, 0x2, 0x2, 0x2, 0x9c, 0x9d, 
       0x7, 0x74, 0x2, 0x2, 0x9d, 0x9e, 0x7, 0x67, 0x2, 0x2, 0x9e, 0x9f, 
       0x7, 0x76, 0x2, 0x2, 0x9f, 0xa0, 0x7, 0x77, 0x2, 0x2, 0xa0, 0xa1, 
       0x7, 0x74, 0x2, 0x2, 0xa1, 0xa2, 0x7, 0x70, 0x2, 0x2, 0xa2, 0xa3, 
       0x3, 0x2, 0x2, 0x2, 0xa3, 0xa4, 0x8, 0xb, 0xb, 0x2, 0xa4, 0x16, 0x3, 
       0x2, 0x2, 0x2, 0xa5, 0xa6, 0x7, 0x6b, 0x2, 0x2, 0xa6, 0xa7, 0x7, 
       0x70, 0x2, 0x2, 0xa7, 0xa8, 0x7, 0x76, 0x2, 0x2, 0xa8, 0xa9, 0x3, 
       0x2, 0x2, 0x2, 0xa9, 0xaa, 0x8, 0xc, 0xc, 0x2, 0xaa, 0x18, 0x3, 0x2, 
       0x2, 0x2, 0xab, 0xac, 0x7, 0x68, 0x2, 0x2, 0xac, 0xad, 0x7, 0x6e, 
       0x2, 0x2, 0xad, 0xae, 0x7, 0x71, 0x2, 0x2, 0xae, 0xaf, 0x7, 0x63, 
       0x2, 0x2, 0xaf, 0xb0, 0x7, 0x76, 0x2, 0x2, 0xb0, 0xb1, 0x3, 0x2, 
       0x2, 0x2, 0xb1, 0xb2, 0x8, 0xd, 0xd, 0x2, 0xb2, 0x1a, 0x3, 0x2, 0x2, 
       0x2, 0xb3, 0xb4, 0x7, 0x78, 0x2, 0x2, 0xb4, 0xb5, 0x7, 0x71, 0x2, 
       0x2, 0xb5, 0xb6, 0x7, 0x6b, 0x2, 0x2, 0xb6, 0xb7, 0x7, 0x66, 0x2, 
       0x2, 0xb7, 0xb8, 0x3, 0x2, 0x2, 0x2, 0xb8, 0xb9, 0x8, 0xe, 0xe, 0x2, 
       0xb9, 0x1c, 0x3, 0x2, 0x2, 0x2, 0xba, 0xbb, 0x7, 0x2a, 0x2, 0x2, 
       0xbb, 0xbc, 0x8, 0xf, 0xf, 0x2, 0xbc, 0x1e, 0x3, 0x2, 0x2, 0x2, 0xbd, 
       0xbe, 0x7, 0x2b, 0x2, 0x2, 0xbe, 0xbf, 0x8, 0x10, 0x10, 0x2, 0xbf, 
       0x20, 0x3, 0x2, 0x2, 0x2, 0xc0, 0xc1, 0x7, 0x7d, 0x2, 0x2, 0xc1, 
       0xc2, 0x8, 0x11, 0x11, 0x2, 0xc2, 0x22, 0x3, 0x2, 0x2, 0x2, 0xc3, 
       0xc4, 0x7, 0x7f, 0x2, 0x2, 0xc4, 0xc5, 0x8, 0x12, 0x12, 0x2, 0xc5, 
       0x24, 0x3, 0x2, 0x2, 0x2, 0xc6, 0xc7, 0x7, 0x5d, 0x2, 0x2, 0xc7, 
       0xc8, 0x8, 0x13, 0x13, 0x2, 0xc8, 0x26, 0x3, 0x2, 0x2, 0x2, 0xc9, 
       0xca, 0x7, 0x5f, 0x2, 0x2, 0xca, 0xcb, 0x8, 0x14, 0x14, 0x2, 0xcb, 
       0x28, 0x3, 0x2, 0x2, 0x2, 0xcc, 0xcd, 0x7, 0x3d, 0x2, 0x2, 0xcd, 
       0xce, 0x8, 0x15, 0x15, 0x2, 0xce, 0x2a, 0x3, 0x2, 0x2, 0x2, 0xcf, 
       0xd0, 0x7, 0x2e, 0x2, 0x2, 0xd0, 0xd1, 0x8, 0x16, 0x16, 0x2, 0xd1, 
       0x2c, 0x3, 0x2, 0x2, 0x2, 0xd2, 0xd3, 0x9, 0x5, 0x2, 0x2, 0xd3, 0xd4, 
       0x8, 0x17, 0x17, 0x2, 0xd4, 0x2e, 0x3, 0x2, 0x2, 0x2, 0xd5, 0xd6, 
       0x9, 0x5, 0x2, 0x2, 0xd6, 0xd7, 0x8, 0x18, 0x18, 0x2, 0xd7, 0x30, 
       0x3, 0x2, 0x2, 0x2, 0xd8, 0xd9, 0x9, 0x6, 0x2, 0x2, 0xd9, 0xda, 0x8, 
       0x19, 0x19, 0x2, 0xda, 0x32, 0x3, 0x2, 0x2, 0x2, 0xdb, 0xdc, 0x7, 
       0x2d, 0x2, 0x2, 0xdc, 0xdd, 0x7, 0x2d, 0x2, 0x2, 0xdd, 0xde, 0x3, 
       0x2, 0x2, 0x2, 0xde, 0xdf, 0x8, 0x1a, 0x1a, 0x2, 0xdf, 0x34, 0x3, 
       0x2, 0x2, 0x2, 0xe0, 0xe1, 0x7, 0x2f, 0x2, 0x2, 0xe1, 0xe2, 0x7, 
       0x2f, 0x2, 0x2, 0xe2, 0xe3, 0x3, 0x2, 0x2, 0x2, 0xe3, 0xe4, 0x8, 
       0x1b, 0x1b, 0x2, 0xe4, 0x36, 0x3, 0x2, 0x2, 0x2, 0xe5, 0xe6, 0x7, 
       0x23, 0x2, 0x2, 0xe6, 0xe7, 0x8, 0x1c, 0x1c, 0x2, 0xe7, 0x38, 0x3, 
       0x2, 0x2, 0x2, 0xe8, 0xe9, 0x7, 0x3e, 0x2, 0x2, 0xe9, 0xf4, 0x7, 
       0x3f, 0x2, 0x2, 0xea, 0xeb, 0x7, 0x3f, 0x2, 0x2, 0xeb, 0xf4, 0x7, 
       0x3f, 0x2, 0x2, 0xec, 0xed, 0x7, 0x40, 0x2, 0x2, 0xed, 0xf4, 0x7, 
       0x3f, 0x2, 0x2, 0xee, 0xf4, 0x9, 0x7, 0x2, 0x2, 0xef, 0xf0, 0x7, 
       0x23, 0x2, 0x2, 0xf0, 0xf1, 0x7, 0x3f, 0x2, 0x2, 0xf1, 0xf2, 0x3, 
       0x2, 0x2, 0x2, 0xf2, 0xf4, 0x8, 0x1d, 0x1d, 0x2, 0xf3, 0xe8, 0x3, 
       0x2, 0x2, 0x2, 0xf3, 0xea, 0x3, 0x2, 0x2, 0x2, 0xf3, 0xec, 0x3, 0x2, 
       0x2, 0x2, 0xf3, 0xee, 0x3, 0x2, 0x2, 0x2, 0xf3, 0xef, 0x3, 0x2, 0x2, 
       0x2, 0xf4, 0x3a, 0x3, 0x2, 0x2, 0x2, 0xf5, 0xf6, 0x7, 0x28, 0x2, 
       0x2, 0xf6, 0xfc, 0x7, 0x28, 0x2, 0x2, 0xf7, 0xf8, 0x7, 0x7e, 0x2, 
       0x2, 0xf8, 0xf9, 0x7, 0x7e, 0x2, 0x2, 0xf9, 0xfa, 0x3, 0x2, 0x2, 
       0x2, 0xfa, 0xfc, 0x8, 0x1e, 0x1e, 0x2, 0xfb, 0xf5, 0x3, 0x2, 0x2, 
       0x2, 0xfb, 0xf7, 0x3, 0x2, 0x2, 0x2, 0xfc, 0x3c, 0x3, 0x2, 0x2, 0x2, 
       0xfd, 0xfe, 0x7, 0x3f, 0x2, 0x2, 0xfe, 0xff, 0x8, 0x1f, 0x1f, 0x2, 
       0xff, 0x3e, 0x3, 0x2, 0x2, 0x2, 0x100, 0x104, 0x9, 0x8, 0x2, 0x2, 
       0x101, 0x103, 0x9, 0x9, 0x2, 0x2, 0x102, 0x101, 0x3, 0x2, 0x2, 0x2, 
       0x103, 0x106, 0x3, 0x2, 0x2, 0x2, 0x104, 0x102, 0x3, 0x2, 0x2, 0x2, 
       0x104, 0x105, 0x3, 0x2, 0x2, 0x2, 0x105, 0x107, 0x3, 0x2, 0x2, 0x2, 
       0x106, 0x104, 0x3, 0x2, 0x2, 0x2, 0x107, 0x108, 0x8, 0x20, 0x20, 
       0x2, 0x108, 0x40, 0x3, 0x2, 0x2, 0x2, 0x109, 0x10b, 0x9, 0xa, 0x2, 
       0x2, 0x10a, 0x109, 0x3, 0x2, 0x2, 0x2, 0x10b, 0x10c, 0x3, 0x2, 0x2, 
       0x2, 0x10c, 0x10a, 0x3, 0x2, 0x2, 0x2, 0x10c, 0x10d, 0x3, 0x2, 0x2, 
       0x2, 0x10d, 0x10e, 0x3, 0x2, 0x2, 0x2, 0x10e, 0x10f, 0x8, 0x21, 0x21, 
       0x2, 0x10f, 0x42, 0x3, 0x2, 0x2, 0x2, 0x110, 0x112, 0x9, 0xa, 0x2, 
       0x2, 0x111, 0x110, 0x3, 0x2, 0x2, 0x2, 0x112, 0x113, 0x3, 0x2, 0x2, 
       0x2, 0x113, 0x111, 0x3, 0x2, 0x2, 0x2, 0x113, 0x114, 0x3, 0x2, 0x2, 
       0x2, 0x114, 0x11c, 0x3, 0x2, 0x2, 0x2, 0x115, 0x119, 0x7, 0x30, 0x2, 
       0x2, 0x116, 0x118, 0x9, 0xa, 0x2, 0x2, 0x117, 0x116, 0x3, 0x2, 0x2, 
       0x2, 0x118, 0x11b, 0x3, 0x2, 0x2, 0x2, 0x119, 0x117, 0x3, 0x2, 0x2, 
       0x2, 0x119, 0x11a, 0x3, 0x2, 0x2, 0x2, 0x11a, 0x11d, 0x3, 0x2, 0x2, 
       0x2, 0x11b, 0x119, 0x3, 0x2, 0x2, 0x2, 0x11c, 0x115, 0x3, 0x2, 0x2, 
       0x2, 0x11c, 0x11d, 0x3, 0x2, 0x2, 0x2, 0x11d, 0x127, 0x3, 0x2, 0x2, 
       0x2, 0x11e, 0x120, 0x9, 0xb, 0x2, 0x2, 0x11f, 0x121, 0x9, 0x5, 0x2, 
       0x2, 0x120, 0x11f, 0x3, 0x2, 0x2, 0x2, 0x120, 0x121, 0x3, 0x2, 0x2, 
       0x2, 0x121, 0x123, 0x3, 0x2, 0x2, 0x2, 0x122, 0x124, 0x9, 0xa, 0x2, 
       0x2, 0x123, 0x122, 0x3, 0x2, 0x2, 0x2, 0x124, 0x125, 0x3, 0x2, 0x2, 
       0x2, 0x125, 0x123, 0x3, 0x2, 0x2, 0x2, 0x125, 0x126, 0x3, 0x2, 0x2, 
       0x2, 0x126, 0x128, 0x3, 0x2, 0x2, 0x2, 0x127, 0x11e, 0x3, 0x2, 0x2, 
       0x2, 0x127, 0x128, 0x3, 0x2, 0x2, 0x2, 0x128, 0x129, 0x3, 0x2, 0x2, 
       0x2, 0x129, 0x139, 0x8, 0x22, 0x22, 0x2, 0x12a, 0x12c, 0x7, 0x30, 
       0x2, 0x2, 0x12b, 0x12d, 0x9, 0xa, 0x2, 0x2, 0x12c, 0x12b, 0x3, 0x2, 
       0x2, 0x2, 0x12d, 0x12e, 0x3, 0x2, 0x2, 0x2, 0x12e, 0x12c, 0x3, 0x2, 
       0x2, 0x2, 0x12e, 0x12f, 0x3, 0x2, 0x2, 0x2, 0x12f, 0x130, 0x3, 0x2, 
       0x2, 0x2, 0x130, 0x139, 0x8, 0x22, 0x23, 0x2, 0x131, 0x133, 0x9, 
       0xa, 0x2, 0x2, 0x132, 0x131, 0x3, 0x2, 0x2, 0x2, 0x133, 0x134, 0x3, 
       0x2, 0x2, 0x2, 0x134, 0x132, 0x3, 0x2, 0x2, 0x2, 0x134, 0x135, 0x3, 
       0x2, 0x2, 0x2, 0x135, 0x136, 0x3, 0x2, 0x2, 0x2, 0x136, 0x137, 0x7, 
       0x30, 0x2, 0x2, 0x137, 0x139, 0x8, 0x22, 0x24, 0x2, 0x138, 0x111, 
       0x3, 0x2, 0x2, 0x2, 0x138, 0x12a, 0x3, 0x2, 0x2, 0x2, 0x138, 0x132, 
       0x3, 0x2, 0x2, 0x2, 0x139, 0x44, 0x3, 0x2, 0x2, 0x2, 0x16, 0x2, 0x4b, 
       0x57, 0x59, 0x67, 0x69, 0x74, 0xf3, 0xfb, 0x104, 0x10c, 0x113, 0x119, 
       0x11c, 0x120, 0x125, 0x127, 0x12e, 0x134, 0x138, 0x25, 0x3, 0x2, 
       0x2, 0x8, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x3, 0x6, 0x5, 
       0x3, 0x7, 0x6, 0x3, 0x8, 0x7, 0x3, 0x9, 0x8, 0x3, 0xa, 0x9, 0x3, 
       0xb, 0xa, 0x3, 0xc, 0xb, 0x3, 0xd, 0xc, 0x3, 0xe, 0xd, 0x3, 0xf, 
       0xe, 0x3, 0x10, 0xf, 0x3, 0x11, 0x10, 0x3, 0x12, 0x11, 0x3, 0x13, 
       0x12, 0x3, 0x14, 0x13, 0x3, 0x15, 0x14, 0x3, 0x16, 0x15, 0x3, 0x17, 
       0x16, 0x3, 0x18, 0x17, 0x3, 0x19, 0x18, 0x3, 0x1a, 0x19, 0x3, 0x1b, 
       0x1a, 0x3, 0x1c, 0x1b, 0x3, 0x1d, 0x1c, 0x3, 0x1e, 0x1d, 0x3, 0x1f, 
       0x1e, 0x3, 0x20, 0x1f, 0x3, 0x21, 0x20, 0x3, 0x22, 0x21, 0x3, 0x22, 
       0x22, 0x3, 0x22, 0x23, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

C8086Lexer::Initializer C8086Lexer::_init;
