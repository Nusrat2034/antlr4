
// Generated from C2105140Lexer.g4 by ANTLR 4.13.2


#include "C2105140Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct C2105140LexerStaticData final {
  C2105140LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  C2105140LexerStaticData(const C2105140LexerStaticData&) = delete;
  C2105140LexerStaticData(C2105140LexerStaticData&&) = delete;
  C2105140LexerStaticData& operator=(const C2105140LexerStaticData&) = delete;
  C2105140LexerStaticData& operator=(C2105140LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag c2105140lexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<C2105140LexerStaticData> c2105140lexerLexerStaticData = nullptr;

void c2105140lexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (c2105140lexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(c2105140lexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<C2105140LexerStaticData>(
    std::vector<std::string>{
      "IF", "ELSE", "FOR", "WHILE", "DO", "BREAK", "INT", "FLOAT", "DOUBLE", 
      "CHAR", "STRING", "VOID", "RETURN", "SWITCH", "CASE", "DEFAULT", "CONTINUE", 
      "ASSIGNOP", "INCOP", "RELOP", "LOGICOP", "BITOP", "NOT", "ADDOP", 
      "MULOP", "LPAREN", "RPAREN", "LCURL", "RCURL", "LSQUARE", "RSQUARE", 
      "COMMA", "SEMICOLON", "CONST_INT", "CONST_FLOAT", "CONST_CHAR", "STRING_LITERAL", 
      "ID", "WS", "COMMENT", "MULTILINE_COMMENT", "ERROR_CHAR"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'if'", "'else'", "'for'", "'while'", "'do'", "'break'", "'int'", 
      "'float'", "'double'", "'char'", "'string'", "'void'", "'return'", 
      "'switch'", "'case'", "'default'", "'continue'", "'='", "", "", "", 
      "", "'!'", "", "", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
      "';'"
    },
    std::vector<std::string>{
      "", "IF", "ELSE", "FOR", "WHILE", "DO", "BREAK", "INT", "FLOAT", "DOUBLE", 
      "CHAR", "STRING", "VOID", "RETURN", "SWITCH", "CASE", "DEFAULT", "CONTINUE", 
      "ASSIGNOP", "INCOP", "RELOP", "LOGICOP", "BITOP", "NOT", "ADDOP", 
      "MULOP", "LPAREN", "RPAREN", "LCURL", "RCURL", "LSQUARE", "RSQUARE", 
      "COMMA", "SEMICOLON", "CONST_INT", "CONST_FLOAT", "CONST_CHAR", "STRING_LITERAL", 
      "ID", "WS", "COMMENT", "MULTILINE_COMMENT", "ERROR_CHAR"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,42,328,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,
  	1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
  	10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
  	15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,3,18,189,8,18,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,201,8,19,1,20,1,20,1,20,1,
  	20,3,20,207,8,20,1,21,1,21,1,21,1,21,1,21,3,21,214,8,21,1,22,1,22,1,23,
  	1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,
  	1,30,1,31,1,31,1,32,1,32,1,33,4,33,239,8,33,11,33,12,33,240,1,34,5,34,
  	244,8,34,10,34,12,34,247,9,34,1,34,1,34,4,34,251,8,34,11,34,12,34,252,
  	1,34,4,34,256,8,34,11,34,12,34,257,1,34,1,34,5,34,262,8,34,10,34,12,34,
  	265,9,34,3,34,267,8,34,1,35,1,35,1,35,1,35,3,35,273,8,35,1,35,1,35,1,
  	36,1,36,1,36,1,36,5,36,281,8,36,10,36,12,36,284,9,36,1,36,1,36,1,37,1,
  	37,5,37,290,8,37,10,37,12,37,293,9,37,1,38,4,38,296,8,38,11,38,12,38,
  	297,1,38,1,38,1,39,1,39,1,39,1,39,5,39,306,8,39,10,39,12,39,309,9,39,
  	1,39,1,39,1,40,1,40,1,40,1,40,5,40,317,8,40,10,40,12,40,320,9,40,1,40,
  	1,40,1,40,1,40,1,40,1,41,1,41,1,318,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,
  	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
  	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
  	61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
  	42,1,0,10,3,0,38,38,94,94,124,124,2,0,43,43,45,45,3,0,37,37,42,42,47,
  	47,1,0,48,57,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,
  	3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
  	32,2,0,10,10,13,13,349,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
  	0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
  	1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
  	0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
  	0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
  	1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
  	0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
  	0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
  	1,0,0,0,1,85,1,0,0,0,3,88,1,0,0,0,5,93,1,0,0,0,7,97,1,0,0,0,9,103,1,0,
  	0,0,11,106,1,0,0,0,13,112,1,0,0,0,15,116,1,0,0,0,17,122,1,0,0,0,19,129,
  	1,0,0,0,21,134,1,0,0,0,23,141,1,0,0,0,25,146,1,0,0,0,27,153,1,0,0,0,29,
  	160,1,0,0,0,31,165,1,0,0,0,33,173,1,0,0,0,35,182,1,0,0,0,37,188,1,0,0,
  	0,39,200,1,0,0,0,41,206,1,0,0,0,43,213,1,0,0,0,45,215,1,0,0,0,47,217,
  	1,0,0,0,49,219,1,0,0,0,51,221,1,0,0,0,53,223,1,0,0,0,55,225,1,0,0,0,57,
  	227,1,0,0,0,59,229,1,0,0,0,61,231,1,0,0,0,63,233,1,0,0,0,65,235,1,0,0,
  	0,67,238,1,0,0,0,69,266,1,0,0,0,71,268,1,0,0,0,73,276,1,0,0,0,75,287,
  	1,0,0,0,77,295,1,0,0,0,79,301,1,0,0,0,81,312,1,0,0,0,83,326,1,0,0,0,85,
  	86,5,105,0,0,86,87,5,102,0,0,87,2,1,0,0,0,88,89,5,101,0,0,89,90,5,108,
  	0,0,90,91,5,115,0,0,91,92,5,101,0,0,92,4,1,0,0,0,93,94,5,102,0,0,94,95,
  	5,111,0,0,95,96,5,114,0,0,96,6,1,0,0,0,97,98,5,119,0,0,98,99,5,104,0,
  	0,99,100,5,105,0,0,100,101,5,108,0,0,101,102,5,101,0,0,102,8,1,0,0,0,
  	103,104,5,100,0,0,104,105,5,111,0,0,105,10,1,0,0,0,106,107,5,98,0,0,107,
  	108,5,114,0,0,108,109,5,101,0,0,109,110,5,97,0,0,110,111,5,107,0,0,111,
  	12,1,0,0,0,112,113,5,105,0,0,113,114,5,110,0,0,114,115,5,116,0,0,115,
  	14,1,0,0,0,116,117,5,102,0,0,117,118,5,108,0,0,118,119,5,111,0,0,119,
  	120,5,97,0,0,120,121,5,116,0,0,121,16,1,0,0,0,122,123,5,100,0,0,123,124,
  	5,111,0,0,124,125,5,117,0,0,125,126,5,98,0,0,126,127,5,108,0,0,127,128,
  	5,101,0,0,128,18,1,0,0,0,129,130,5,99,0,0,130,131,5,104,0,0,131,132,5,
  	97,0,0,132,133,5,114,0,0,133,20,1,0,0,0,134,135,5,115,0,0,135,136,5,116,
  	0,0,136,137,5,114,0,0,137,138,5,105,0,0,138,139,5,110,0,0,139,140,5,103,
  	0,0,140,22,1,0,0,0,141,142,5,118,0,0,142,143,5,111,0,0,143,144,5,105,
  	0,0,144,145,5,100,0,0,145,24,1,0,0,0,146,147,5,114,0,0,147,148,5,101,
  	0,0,148,149,5,116,0,0,149,150,5,117,0,0,150,151,5,114,0,0,151,152,5,110,
  	0,0,152,26,1,0,0,0,153,154,5,115,0,0,154,155,5,119,0,0,155,156,5,105,
  	0,0,156,157,5,116,0,0,157,158,5,99,0,0,158,159,5,104,0,0,159,28,1,0,0,
  	0,160,161,5,99,0,0,161,162,5,97,0,0,162,163,5,115,0,0,163,164,5,101,0,
  	0,164,30,1,0,0,0,165,166,5,100,0,0,166,167,5,101,0,0,167,168,5,102,0,
  	0,168,169,5,97,0,0,169,170,5,117,0,0,170,171,5,108,0,0,171,172,5,116,
  	0,0,172,32,1,0,0,0,173,174,5,99,0,0,174,175,5,111,0,0,175,176,5,110,0,
  	0,176,177,5,116,0,0,177,178,5,105,0,0,178,179,5,110,0,0,179,180,5,117,
  	0,0,180,181,5,101,0,0,181,34,1,0,0,0,182,183,5,61,0,0,183,36,1,0,0,0,
  	184,185,5,43,0,0,185,189,5,43,0,0,186,187,5,45,0,0,187,189,5,45,0,0,188,
  	184,1,0,0,0,188,186,1,0,0,0,189,38,1,0,0,0,190,201,5,60,0,0,191,192,5,
  	60,0,0,192,201,5,61,0,0,193,201,5,62,0,0,194,195,5,62,0,0,195,201,5,61,
  	0,0,196,197,5,61,0,0,197,201,5,61,0,0,198,199,5,33,0,0,199,201,5,61,0,
  	0,200,190,1,0,0,0,200,191,1,0,0,0,200,193,1,0,0,0,200,194,1,0,0,0,200,
  	196,1,0,0,0,200,198,1,0,0,0,201,40,1,0,0,0,202,203,5,38,0,0,203,207,5,
  	38,0,0,204,205,5,124,0,0,205,207,5,124,0,0,206,202,1,0,0,0,206,204,1,
  	0,0,0,207,42,1,0,0,0,208,214,7,0,0,0,209,210,5,60,0,0,210,214,5,60,0,
  	0,211,212,5,62,0,0,212,214,5,62,0,0,213,208,1,0,0,0,213,209,1,0,0,0,213,
  	211,1,0,0,0,214,44,1,0,0,0,215,216,5,33,0,0,216,46,1,0,0,0,217,218,7,
  	1,0,0,218,48,1,0,0,0,219,220,7,2,0,0,220,50,1,0,0,0,221,222,5,40,0,0,
  	222,52,1,0,0,0,223,224,5,41,0,0,224,54,1,0,0,0,225,226,5,123,0,0,226,
  	56,1,0,0,0,227,228,5,125,0,0,228,58,1,0,0,0,229,230,5,91,0,0,230,60,1,
  	0,0,0,231,232,5,93,0,0,232,62,1,0,0,0,233,234,5,44,0,0,234,64,1,0,0,0,
  	235,236,5,59,0,0,236,66,1,0,0,0,237,239,7,3,0,0,238,237,1,0,0,0,239,240,
  	1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,68,1,0,0,0,242,244,7,3,0,
  	0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,
  	248,1,0,0,0,247,245,1,0,0,0,248,250,5,46,0,0,249,251,7,3,0,0,250,249,
  	1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,267,1,0,0,
  	0,254,256,7,3,0,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,1,0,0,0,257,
  	258,1,0,0,0,258,259,1,0,0,0,259,263,5,46,0,0,260,262,7,3,0,0,261,260,
  	1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,267,1,0,0,
  	0,265,263,1,0,0,0,266,245,1,0,0,0,266,255,1,0,0,0,267,70,1,0,0,0,268,
  	272,5,39,0,0,269,273,8,4,0,0,270,271,5,92,0,0,271,273,9,0,0,0,272,269,
  	1,0,0,0,272,270,1,0,0,0,273,274,1,0,0,0,274,275,5,39,0,0,275,72,1,0,0,
  	0,276,282,5,34,0,0,277,281,8,5,0,0,278,279,5,92,0,0,279,281,9,0,0,0,280,
  	277,1,0,0,0,280,278,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,
  	0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,286,5,34,0,0,286,74,1,0,0,0,
  	287,291,7,6,0,0,288,290,7,7,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,
  	1,0,0,0,291,292,1,0,0,0,292,76,1,0,0,0,293,291,1,0,0,0,294,296,7,8,0,
  	0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,
  	299,1,0,0,0,299,300,6,38,0,0,300,78,1,0,0,0,301,302,5,47,0,0,302,303,
  	5,47,0,0,303,307,1,0,0,0,304,306,8,9,0,0,305,304,1,0,0,0,306,309,1,0,
  	0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,
  	311,6,39,0,0,311,80,1,0,0,0,312,313,5,47,0,0,313,314,5,42,0,0,314,318,
  	1,0,0,0,315,317,9,0,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,319,1,0,0,
  	0,318,316,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,322,5,42,0,0,322,
  	323,5,47,0,0,323,324,1,0,0,0,324,325,6,40,0,0,325,82,1,0,0,0,326,327,
  	9,0,0,0,327,84,1,0,0,0,18,0,188,200,206,213,240,245,252,257,263,266,272,
  	280,282,291,297,307,318,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  c2105140lexerLexerStaticData = std::move(staticData);
}

}

C2105140Lexer::C2105140Lexer(CharStream *input) : Lexer(input) {
  C2105140Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *c2105140lexerLexerStaticData->atn, c2105140lexerLexerStaticData->decisionToDFA, c2105140lexerLexerStaticData->sharedContextCache);
}

C2105140Lexer::~C2105140Lexer() {
  delete _interpreter;
}

std::string C2105140Lexer::getGrammarFileName() const {
  return "C2105140Lexer.g4";
}

const std::vector<std::string>& C2105140Lexer::getRuleNames() const {
  return c2105140lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& C2105140Lexer::getChannelNames() const {
  return c2105140lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& C2105140Lexer::getModeNames() const {
  return c2105140lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& C2105140Lexer::getVocabulary() const {
  return c2105140lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView C2105140Lexer::getSerializedATN() const {
  return c2105140lexerLexerStaticData->serializedATN;
}

const atn::ATN& C2105140Lexer::getATN() const {
  return *c2105140lexerLexerStaticData->atn;
}




void C2105140Lexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  c2105140lexerLexerInitialize();
#else
  ::antlr4::internal::call_once(c2105140lexerLexerOnceFlag, c2105140lexerLexerInitialize);
#endif
}
